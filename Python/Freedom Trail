class Solution:
    def findRotateSteps(self, ring: str, key: str) -> int:
        N = len(ring)
        M = len(key)
        g = collections.defaultdict(list)
        for i, c in enumerate(ring):
            g[c].append(i)
        
        @lru_cache(None)
        def find(i=0, j=0):
            if j == M: return 0
            target = key[j]
            if ring[i] == key[j]:
                return 1 + find(i, j+1)
            if i < g[target][0]:
                right = g[target][0]
                left = g[target][-1]
                return 1 + min(find(right, j+1) + right - i, find(left, j+1) + N - left + i)
            elif i > g[target][-1]:
                left = g[target][-1]
                right = g[target][0]
                return 1 + min(find(left, j+1) + i - left, find(right, j+1) + N - i + right)
            else:
                idx = bisect.bisect(g[target], i)
                left, right = g[target][idx-1], g[target][idx]
                return 1 + min(find(left, j+1) + i - left, find(right, j+1) + right - i)
        return find()
